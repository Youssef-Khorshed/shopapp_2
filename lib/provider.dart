import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:dio/dio.dart';
import 'package:dio/dio.dart';
import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/painting.dart';
import 'package:tst_new2/model/Categories/catmodel.dart';
import 'package:tst_new2/shared/component/navigation.dart';
import 'package:tst_new2/shared/endpoints/end.dart';
import 'package:tst_new2/shared/network/dio.dart';
import 'package:tst_new2/shared/network/local/preference.dart';

import 'model/users/usersmodel.dart';
import 'modules/HomePage/bottomnavigationscreens/screen1.dart';
import 'modules/HomePage/bottomnavigationscreens/screen2.dart';
import 'modules/HomePage/bottomnavigationscreens/screen3.dart';
import 'modules/HomePage/homepage.dart';
import 'modules/SplashScreen/splashanimation.dart';

class Model extends ChangeNotifier {
  int counter = 0;

  void counteradd() {
    counter++;
    notifyListeners();
  }

  List<String> page = [Aniamtions.page2, Aniamtions.page3, Aniamtions.page4];
  int pageindex = 0;

  void nextpage() {
    pageindex++;
    notifyListeners();
  }

  void prevoispage() {
    pageindex--;
    notifyListeners();
  }

  void intialpage() {
    pageindex = 0;
    notifyListeners();
  }

  bool visible = false;

  void visibleback() {
    visible = true;
    notifyListeners();
  }

  void invisibleback() {
    visible = false;
    notifyListeners();
  }

  bool loading = false;

  void startloading() {
    loading = true;
    notifyListeners();
  }

  void endloading() {
    loading = false;
    notifyListeners();
  }

  void login_(
      {required String email,
      required String password,
      required BuildContext context}) {
    startloading();
    DioHelper.post(
        path: login,
        map: {'username': '${email}', 'password': '${password}'}).then((value) {
      Timer(Duration(seconds: 2), () {
        endloading();
      });
      Timer(Duration(seconds: 2), () {
        gotohomepage(
            value.data['token'], value.data['msg'], context, Homepage());
      });
    }).catchError((e) {
      endloading();
      print(e);
    });
  }

  void gotohomepage(token, e, context, widget) {
    if (e == null) {
      Preference.put(key: 'token', value: token);
      navigation_back(context: context, widget: widget);
    } else {
      print(e);
    }
    notifyListeners();
  }

  Product product = new Product();

  void getproducts(String? item) {
    product = new Product();
    notifyListeners();
    startloading();
    DioHelper.getdata(path: 'products${item}', map: null).then((value) {
      product = Product.fromJson(value.data);
      product.autos.forEach((element) {
        cartitems.forEach((element2) {
          if (element.id == element2.id) {
            element.in_cart = true;
          }
        });
        favitems.forEach((element2) {
          if (element.id == element2.id) {
            element.in_fav = true;
          }
        });
      });
      notifyListeners();
      endloading();
    }).catchError((e) {
      print(e);
    });
  }

  List<Color> colors = [];
  Category category = new Category();

  void getCategories() {
    DioHelper.getdata(path: allcategories, map: null).then((value) {
      category = Category.fromJson(value.data);
      category.items.forEach((element) {
        if (element == 'All') {
          colors.add(Color(0xFF484C5E));
          last = 0;
        } else
          colors.add(Color(0xFF020B39));
      });
      //  print(category.items);
    });
    notifyListeners();
  }

  int bottomnavindex = 0;
  List<Widget> bottompages = [
    BottomScreen1(),
    BottomScreen2(),
    BottomScreen3()
  ];

  void bottomnav(index) {
    bottomnavindex = index;
    notifyListeners();
  }

  void changeitemtabcolor({int? current}) {
    if (last == null) {
      colors[current!] = Color(0xFF484C5E);
    } else if (current != null && last != null) {
      colors[current] = Color(0xFF484C5E);
      colors[last!] = Color(0xFF020B39);
    }

    notifyListeners();
  }

  static List<Autogenerated> favitems = [];

  void addfav(Autogenerated value) {
    value.in_fav = true;
    !favitems.contains(value) ? favitems.add(value) : null;
    print(favitems);
    store_fav_product(favitems);
    notifyListeners();
  }

  void removefav(Autogenerated value) {
    value.in_fav = false;
    favitems.remove(value);
    print(favitems);
    store_fav_product(favitems);
    notifyListeners();
  }

  static List<Autogenerated> cartitems = [];

  void addcart(Autogenerated value) {
    if (!cartitems.contains(value) && value.qunatity > 0) {
      cartitems.add(value);
      value.in_cart = true;
      print(cartitems);
      store_cart_product(cartitems);
    }
    ;
    notifyListeners();
  }

  void removecart(Autogenerated value) {
    value.in_cart = false;
    cartitems.remove(value);
    print(cartitems);
    store_cart_product(cartitems);
    notifyListeners();
  }

  void inc_quantity(Autogenerated value) {
    value.qunatity++;
    notifyListeners();
  }

  void dec_quantity(Autogenerated value) {
    value.qunatity == 0 ? value.qunatity : value.qunatity--;
    notifyListeners();
  }

  Widget total() {
    dynamic sum = 0;
    if (cartitems.length > 0) {
      cartitems.forEach((element) {
        sum += (element.price * element.qunatity);
      });
    }
    double total = sum + (sum * 0.15);
    return Text(
      'Price  $sum\ntaxes %15 \nTotal price ${total.round()} ',
      style: TextStyle(fontWeight: FontWeight.bold),
    );
  }

  void store_fav_product(List<Autogenerated> list) {
    List<String> val = [];
    list.forEach((element) {
      val.add(json.encode(element.tojson()));
    });
    Preference.put(key: 'favourite', value: val).then((value) => null);
  }

  void store_cart_product(List<Autogenerated> list) {
    List<String> val = [];
    list.forEach((element) {
      print(element.qunatity);
      val.add(json.encode(element.tojson()));
    });
    Preference.put(key: 'cart', value: val).then((value) => null);
  }

  void cartclear() {
    Model.cartitems.clear();
    getproducts("");
    notifyListeners();
  }

  void favclear() {
    Model.favitems.clear();
    getproducts("");
    notifyListeners();
  }
}
